import logging
import json

from datetime import datetime
from datetime import timedelta
from nameko.extensions import DependencyProvider
from boto3 import session

logging.getLogger('botocore').setLevel(logging.WARNING)


class S3Wrapper:
    def __init__(self, client, config):
        self.client = client
        self.config = config

    def get_bucket_name(self, name):
        try:
            buckets = self.config.get('buckets')
            return buckets[name]
        except KeyError:
            logging.error("No such bucket exist: 
{}".format(name))

    def persist(self, pipeline_name, mid, data):
        timestamp = 
datetime.now().strftime('%Y-%m-%d-%H-%M-%S')
        key = '{0}/{1}.json'.format(mid, timestamp)

        res = self.client.put_object(
            Bucket=self.get_bucket_name(pipeline_name),
            Key=key,
            Body=json.dumps(data),
            ContentType='application/json')

        return res['ResponseMetadata']['HTTPStatusCode']

    def get_files(self, from_date, delta, data_type, mid):
        bucket_name = 
self.get_bucket_name('validated_{}'.format(data_type))
        for key in self._get_file_keys(from_date, delta, 
bucket_name, mid):
            yield self._get_file(key, bucket_name)

    def _get_file_keys(self, from_date, delta, bucket, mid):
        delta_minutes = int((delta.total_seconds()/60) + 1)

        for i in range(delta_minutes):
            prefix = self._create_prefix(mid, from_date, i)
            response = self.client.list_objects(
                Bucket=bucket,
                Prefix=prefix,
            )

            if response.get('Contents'):
                for obj in response.get('Contents'):
                    yield obj['Key']

    def _create_prefix(self, mid, from_date, i):
        return '{0}/{1}'.format(
            mid,
            (from_date + 
timedelta(minutes=i)).strftime("%Y-%m-%d-%H-%M-"))

    def _get_file(self, key, bucket):
        return json.loads(
            self.client.get_object(
                Bucket=bucket,
                Key=key
            )['Body'].read().decode()
        )


class S3Client(DependencyProvider):
    def __init__(self, config=None):
        self.config = config

    def setup(self):
        if not self.config:
            self.config = self.container.config['S3']

        self.client = self._get_client()

    def stop(self):
        del self.client

    def get_dependency(self, worker_ctx):
        return S3Wrapper(self.client, self.config)

    def _get_client(self):
        s3_session = 
session.Session(region_name=self.config['region'])
        client =  s3_session.client(
            's3',
            
config=session.Config(signature_version=self.config['sig_ver']))

        return client

